- name: Write importer script
  shell: bash
  run: |
    cat > importer.py <<'PY'
    import os, csv, time, requests, sys, re

    API = "https://api.linear.app/graphql"
    KEY = os.environ.get("LINEAR_API_KEY")
    TEAM_KEY = os.environ.get("LINEAR_TEAM_KEY")
    CSV_PATH = os.environ.get("CSV_PATH")

    if not KEY:  print("ERROR: LINEAR_API_KEY secret missing."); sys.exit(1)
    if not TEAM_KEY: print("ERROR: LINEAR_TEAM_KEY env not set."); sys.exit(1)
    if not CSV_PATH: print("ERROR: CSV_PATH env not set."); sys.exit(1)

    H = {"Authorization": KEY, "Content-Type": "application/json"}

    def gql(q, v=None):
        r = requests.post(API, headers=H, json={"query": q, "variables": v or {}})
        if r.status_code == 429:
            time.sleep(2); r = requests.post(API, headers=H, json={"query": q, "variables": v or {}})
        r.raise_for_status()
        j = r.json()
        if "errors" in j: raise SystemExit(j["errors"])
        return j["data"]

    # Resolve team
    d = gql("query($k:String!){ teams(filter:{ key:{ eq:$k } }) { nodes { id key name } } }", {"k": TEAM_KEY})
    nodes = d["teams"]["nodes"]
    if not nodes: print(f"ERROR: No Linear team found for key '{TEAM_KEY}'."); sys.exit(1)
    TEAM_ID = nodes[0]["id"]

    TITLE_ALIASES = {"title","test case","testcase","test scenario","name","summary","case title"}

    def norm_key(k: str) -> str:
        k = re.sub(r'^\ufeff','', k or '').strip().lower()
        if k in TITLE_ALIASES: return "Title"
        mapping = {
          "description":"Description","steps":"Steps","expected":"Expected",
          "priority":"Priority","labels":"Labels","externalid":"ExternalId","external id":"ExternalId"
        }
        return mapping.get(k, k)

    def normalize_row(raw):
        return { norm_key(k): v for k,v in raw.items() if k is not None }

    def ensure_labels(label_str):
        if not label_str: return []
        names = [n.strip() for n in str(label_str).split(",") if n.strip()]
        ids = []
        for n in names:
            q = gql("query($n:String!){ issueLabels(filter:{ name:{ eq:$n } }) { nodes { id } } }", {"n": n})
            ns = q["issueLabels"]["nodes"]
            if ns: ids.append(ns[0]["id"])
            else:
                c = gql("mutation($n:String!){ issueLabelCreate(input:{ name:$n }) { issueLabel { id } } }", {"n": n})
                ids.append(c["issueLabelCreate"]["issueLabel"]["id"])
        return ids

    # NEW: de-dupe without deprecated issueSearch
    def dup_by_external(ext):
        if not ext: return None
        token = f"ExternalId: `{ext}`"
        q = gql(
            """
            query($token:String!) {
              issues(first: 1, filter: { description: { contains: $token } }) {
                nodes { id identifier }
              }
            }
            """,
            {"token": token},
        )
        ns = q["issues"]["nodes"]
        return ns[0]["id"] if ns else None

    # Read CSV
    with open(CSV_PATH, newline='', encoding="utf-8-sig") as f:
        reader = csv.DictReader(f)
        print("Columns seen:", reader.fieldnames)
        created = skipped = 0

        for i, raw in enumerate(reader, start=1):
            row = normalize_row(raw)

            title = (row.get("Title") or "").strip()
            if not title:
                for key in ["Test Case", "Test Scenario", "Name", "Summary"]:
                    v = (row.get(key) or "").strip()
                    if v:
                        title = v; break
            if not title:
                print(f"Skip row #{i} (empty Title)"); skipped += 1; continue

            ext = (str(row.get("ExternalId") or "").strip())
            if dup_by_external(ext):
                print(f"Skip duplicate ExternalId {ext} ({title})"); skipped += 1; continue

            parts=[]
            if row.get("Description"): parts.append(str(row["Description"]).strip())
            if row.get("Steps"): parts.append("### Steps\n" + str(row["Steps"]).replace("\\n","\n"))
            if row.get("Expected"): parts.append("### Expected Result\n" + str(row["Expected"]).replace("\\n","\n"))
            if ext: parts.append(f"---\nExternalId: `{ext}`")
            desc = "\n\n".join(p for p in parts if p) or "Imported from CSV."

            p = str(row.get("Priority") or "").strip().upper()
            priority = {"P0":0,"0":0,"P1":1,"1":1,"P2":2,"2":2,"P3":3,"3":3}.get(p)
            label_ids = ensure_labels(row.get("Labels", ""))

            inp = {"teamId": TEAM_ID, "title": title, "description": desc}
            if priority is not None: inp["priority"] = priority
            if label_ids: inp["labelIds"] = label_ids

            r = gql("mutation($i:IssueCreateInput!){ issueCreate(input:$i){ issue{ identifier title url } } }", {"i": inp})
            issue = r["issueCreate"]["issue"]
            print(f"CREATED: {issue['identifier']} {issue['title']} -> {issue['url']}")
            created += 1

    print(f"Summary for {CSV_PATH}: created={created}, skipped={skipped}")
    PY
